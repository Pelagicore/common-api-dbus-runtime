/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.qualifier.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <commonapi/tests/TestFreedesktopInterfaceStubDefault.h>

namespace commonapi {
namespace tests {

TestFreedesktopInterfaceStubDefault::TestFreedesktopInterfaceStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(TestFreedesktopInterface::getInterfaceVersion()) {
}

const CommonAPI::Version& TestFreedesktopInterfaceStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) {
    return interfaceVersion_;
}

TestFreedesktopInterfaceStubRemoteEvent* TestFreedesktopInterfaceStubDefault::initStubAdapter(const std::shared_ptr<TestFreedesktopInterfaceStubAdapter>& stubAdapter) {
    CommonAPI::Stub<TestFreedesktopInterfaceStubAdapter, TestFreedesktopInterfaceStubRemoteEvent>::stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}

const uint32_t& TestFreedesktopInterfaceStubDefault::getTestPredefinedTypeAttributeAttribute() {
    return testPredefinedTypeAttributeAttributeValue_;
}

const uint32_t& TestFreedesktopInterfaceStubDefault::getTestPredefinedTypeAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    return getTestPredefinedTypeAttributeAttribute();
}

void TestFreedesktopInterfaceStubDefault::setTestPredefinedTypeAttributeAttribute(uint32_t value) {
    const bool valueChanged = trySetTestPredefinedTypeAttributeAttribute(std::move(value));
    if (valueChanged) {
        stubAdapter_->fireTestPredefinedTypeAttributeAttributeChanged(testPredefinedTypeAttributeAttributeValue_);
    }
}

bool TestFreedesktopInterfaceStubDefault::trySetTestPredefinedTypeAttributeAttribute(uint32_t value) {
    if (!validateTestPredefinedTypeAttributeAttributeRequestedValue(value))
        return false;

    const bool valueChanged = (testPredefinedTypeAttributeAttributeValue_ != value);
    testPredefinedTypeAttributeAttributeValue_ = std::move(value);
    return valueChanged;
}

bool TestFreedesktopInterfaceStubDefault::validateTestPredefinedTypeAttributeAttributeRequestedValue(const uint32_t& value) {
    return true;
}

void TestFreedesktopInterfaceStubDefault::setTestPredefinedTypeAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t value) {
    setTestPredefinedTypeAttributeAttribute(value);
}

void TestFreedesktopInterfaceStubDefault::onRemoteTestPredefinedTypeAttributeAttributeChanged() {
    // No operation in default
}

void TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteTestPredefinedTypeAttributeAttributeChanged() {
    defaultStub_->onRemoteTestPredefinedTypeAttributeAttributeChanged();
}

bool TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteSetTestPredefinedTypeAttributeAttribute(uint32_t value) {
    return defaultStub_->trySetTestPredefinedTypeAttributeAttribute(std::move(value));
}

bool TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteSetTestPredefinedTypeAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t value) {
    return onRemoteSetTestPredefinedTypeAttributeAttribute(value);
}

const uint32_t& TestFreedesktopInterfaceStubDefault::getTestReadonlyAttributeAttribute() {
    return testReadonlyAttributeAttributeValue_;
}

const uint32_t& TestFreedesktopInterfaceStubDefault::getTestReadonlyAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    return getTestReadonlyAttributeAttribute();
}

void TestFreedesktopInterfaceStubDefault::setTestReadonlyAttributeAttribute(uint32_t value) {
    const bool valueChanged = trySetTestReadonlyAttributeAttribute(std::move(value));
    if (valueChanged) {
        stubAdapter_->fireTestReadonlyAttributeAttributeChanged(testReadonlyAttributeAttributeValue_);
    }
}

bool TestFreedesktopInterfaceStubDefault::trySetTestReadonlyAttributeAttribute(uint32_t value) {
    if (!validateTestReadonlyAttributeAttributeRequestedValue(value))
        return false;

    const bool valueChanged = (testReadonlyAttributeAttributeValue_ != value);
    testReadonlyAttributeAttributeValue_ = std::move(value);
    return valueChanged;
}

bool TestFreedesktopInterfaceStubDefault::validateTestReadonlyAttributeAttributeRequestedValue(const uint32_t& value) {
    return true;
}


const DerivedTypeCollection::TestStructExtended& TestFreedesktopInterfaceStubDefault::getTestDerivedStructAttributeAttribute() {
    return testDerivedStructAttributeAttributeValue_;
}

const DerivedTypeCollection::TestStructExtended& TestFreedesktopInterfaceStubDefault::getTestDerivedStructAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    return getTestDerivedStructAttributeAttribute();
}

void TestFreedesktopInterfaceStubDefault::setTestDerivedStructAttributeAttribute(DerivedTypeCollection::TestStructExtended value) {
    const bool valueChanged = trySetTestDerivedStructAttributeAttribute(std::move(value));
    if (valueChanged) {
        stubAdapter_->fireTestDerivedStructAttributeAttributeChanged(testDerivedStructAttributeAttributeValue_);
    }
}

bool TestFreedesktopInterfaceStubDefault::trySetTestDerivedStructAttributeAttribute(DerivedTypeCollection::TestStructExtended value) {
    if (!validateTestDerivedStructAttributeAttributeRequestedValue(value))
        return false;

    const bool valueChanged = (testDerivedStructAttributeAttributeValue_ != value);
    testDerivedStructAttributeAttributeValue_ = std::move(value);
    return valueChanged;
}

bool TestFreedesktopInterfaceStubDefault::validateTestDerivedStructAttributeAttributeRequestedValue(const DerivedTypeCollection::TestStructExtended& value) {
    return true;
}

void TestFreedesktopInterfaceStubDefault::setTestDerivedStructAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, DerivedTypeCollection::TestStructExtended value) {
    setTestDerivedStructAttributeAttribute(value);
}

void TestFreedesktopInterfaceStubDefault::onRemoteTestDerivedStructAttributeAttributeChanged() {
    // No operation in default
}

void TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteTestDerivedStructAttributeAttributeChanged() {
    defaultStub_->onRemoteTestDerivedStructAttributeAttributeChanged();
}

bool TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteSetTestDerivedStructAttributeAttribute(DerivedTypeCollection::TestStructExtended value) {
    return defaultStub_->trySetTestDerivedStructAttributeAttribute(std::move(value));
}

bool TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteSetTestDerivedStructAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, DerivedTypeCollection::TestStructExtended value) {
    return onRemoteSetTestDerivedStructAttributeAttribute(value);
}

const DerivedTypeCollection::TestArrayUInt64& TestFreedesktopInterfaceStubDefault::getTestDerivedArrayAttributeAttribute() {
    return testDerivedArrayAttributeAttributeValue_;
}

const DerivedTypeCollection::TestArrayUInt64& TestFreedesktopInterfaceStubDefault::getTestDerivedArrayAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    return getTestDerivedArrayAttributeAttribute();
}

void TestFreedesktopInterfaceStubDefault::setTestDerivedArrayAttributeAttribute(DerivedTypeCollection::TestArrayUInt64 value) {
    const bool valueChanged = trySetTestDerivedArrayAttributeAttribute(std::move(value));
    if (valueChanged) {
        stubAdapter_->fireTestDerivedArrayAttributeAttributeChanged(testDerivedArrayAttributeAttributeValue_);
    }
}

bool TestFreedesktopInterfaceStubDefault::trySetTestDerivedArrayAttributeAttribute(DerivedTypeCollection::TestArrayUInt64 value) {
    if (!validateTestDerivedArrayAttributeAttributeRequestedValue(value))
        return false;

    const bool valueChanged = (testDerivedArrayAttributeAttributeValue_ != value);
    testDerivedArrayAttributeAttributeValue_ = std::move(value);
    return valueChanged;
}

bool TestFreedesktopInterfaceStubDefault::validateTestDerivedArrayAttributeAttributeRequestedValue(const DerivedTypeCollection::TestArrayUInt64& value) {
    return true;
}

void TestFreedesktopInterfaceStubDefault::setTestDerivedArrayAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, DerivedTypeCollection::TestArrayUInt64 value) {
    setTestDerivedArrayAttributeAttribute(value);
}

void TestFreedesktopInterfaceStubDefault::onRemoteTestDerivedArrayAttributeAttributeChanged() {
    // No operation in default
}

void TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteTestDerivedArrayAttributeAttributeChanged() {
    defaultStub_->onRemoteTestDerivedArrayAttributeAttributeChanged();
}

bool TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteSetTestDerivedArrayAttributeAttribute(DerivedTypeCollection::TestArrayUInt64 value) {
    return defaultStub_->trySetTestDerivedArrayAttributeAttribute(std::move(value));
}

bool TestFreedesktopInterfaceStubDefault::RemoteEventHandler::onRemoteSetTestDerivedArrayAttributeAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, DerivedTypeCollection::TestArrayUInt64 value) {
    return onRemoteSetTestDerivedArrayAttributeAttribute(value);
}





TestFreedesktopInterfaceStubDefault::RemoteEventHandler::RemoteEventHandler(TestFreedesktopInterfaceStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace tests
} // namespace commonapi
