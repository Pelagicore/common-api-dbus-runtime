/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.qualifier.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <commonapi/tests/managed/SecondRootStubDefault.h>

namespace commonapi {
namespace tests {
namespace managed {

SecondRootStubDefault::SecondRootStubDefault():
        remoteEventHandler_(this),
        autoInstanceCounter_(0),
        interfaceVersion_(SecondRoot::getInterfaceVersion()) {
}

const CommonAPI::Version& SecondRootStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) {
    return interfaceVersion_;
}

SecondRootStubRemoteEvent* SecondRootStubDefault::initStubAdapter(const std::shared_ptr<SecondRootStubAdapter>& stubAdapter) {
    CommonAPI::Stub<SecondRootStubAdapter, SecondRootStubRemoteEvent>::stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}




bool SecondRootStubDefault::registerManagedStubLeafInterfaceAutoInstance(std::shared_ptr<LeafInterfaceStub> stub) {
    autoInstanceCounter_++;
    std::stringstream ss;
    ss << stubAdapter_->getInstanceId() << ".i" << autoInstanceCounter_;
    std::string instance = ss.str();
    return stubAdapter_->registerManagedStubLeafInterface(stub, instance);
}
bool SecondRootStubDefault::registerManagedStubLeafInterface(std::shared_ptr<LeafInterfaceStub> stub, const std::string& instance) {
    return stubAdapter_->registerManagedStubLeafInterface(stub, instance);
}
bool SecondRootStubDefault::deregisterManagedStubLeafInterface(const std::string& instance) {
    return stubAdapter_->deregisterManagedStubLeafInterface(instance);
}
std::set<std::string>& SecondRootStubDefault::getLeafInterfaceInstances() {
    return stubAdapter_->getLeafInterfaceInstances();
}

SecondRootStubDefault::RemoteEventHandler::RemoteEventHandler(SecondRootStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace managed
} // namespace tests
} // namespace commonapi
