/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.qualifier.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_TESTS_Extended_Interface_DBUS_STUB_ADAPTER_H_
#define COMMONAPI_TESTS_Extended_Interface_DBUS_STUB_ADAPTER_H_

#include <commonapi/tests/ExtendedInterfaceStub.h>
#include <commonapi/tests/TestInterfaceDBusStubAdapter.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusStubAdapterHelper.h>
#include <CommonAPI/DBus/DBusStubAdapter.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusServicePublisher.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace commonapi {
namespace tests {

typedef CommonAPI::DBus::DBusStubAdapterHelper<ExtendedInterfaceStub> ExtendedInterfaceDBusStubAdapterHelper;

class ExtendedInterfaceDBusStubAdapterInternal: public virtual ExtendedInterfaceStubAdapter, public ExtendedInterfaceDBusStubAdapterHelper, public TestInterfaceDBusStubAdapterInternal {
 public:
    ExtendedInterfaceDBusStubAdapterInternal(
            const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
            const std::string& commonApiAddress,
            const std::string& dbusInterfaceName,
            const std::string& dbusBusName,
            const std::string& dbusObjectPath,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
            const std::shared_ptr<CommonAPI::StubBase>& stub);

    ~ExtendedInterfaceDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();




    const ExtendedInterfaceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();

    virtual const std::string getAddress() const {
        return DBusStubAdapter::getAddress();
    }

    virtual const std::string& getDomain() const {
        return DBusStubAdapter::getDomain();
    }

    virtual const std::string& getServiceId() const {
        return DBusStubAdapter::getServiceId();
    }

    virtual const std::string& getInstanceId() const {
        return DBusStubAdapter::getInstanceId();
    }

    virtual void init(std::shared_ptr<DBusStubAdapter> instance) {
        return ExtendedInterfaceDBusStubAdapterHelper::init(instance);
    }

    virtual void deinit() {
        return ExtendedInterfaceDBusStubAdapterHelper::deinit();
    }

    virtual bool onInterfaceDBusMessage(const CommonAPI::DBus::DBusMessage& dbusMessage) {
        return ExtendedInterfaceDBusStubAdapterHelper::onInterfaceDBusMessage(dbusMessage);
    }

    virtual bool onInterfaceDBusFreedesktopPropertiesMessage(const CommonAPI::DBus::DBusMessage& dbusMessage) {
        return ExtendedInterfaceDBusStubAdapterHelper::onInterfaceDBusFreedesktopPropertiesMessage(dbusMessage);
    }

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ExtendedInterfaceStub,
        CommonAPI::Version
        > getExtendedInterfaceInterfaceVersionStubDispatcher;


#ifdef WIN32
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ExtendedInterfaceStub,
        uint32_t
        > getTestPredefinedTypeAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ExtendedInterfaceStub,
        uint32_t
        > setTestPredefinedTypeAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ExtendedInterfaceStub,
        DerivedTypeCollection::TestStructExtended
        > getTestDerivedStructAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ExtendedInterfaceStub,
        DerivedTypeCollection::TestStructExtended
        > setTestDerivedStructAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ExtendedInterfaceStub,
        DerivedTypeCollection::TestArrayUInt64
        > getTestDerivedArrayAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ExtendedInterfaceStub,
        DerivedTypeCollection::TestArrayUInt64
        > setTestDerivedArrayAttributeAttributeStubDispatcher;
#endif

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<uint32_t>,
    std::tuple<>
    > testIntMethodExtendedStubDispatcher;

#ifdef WIN32
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<>,
    std::tuple<>
    > testEmptyMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<uint32_t, std::string>,
    std::tuple<>
    > testVoidPredefinedTypeMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<uint32_t, std::string>,
    std::tuple<uint32_t, std::string>
    > testPredefinedTypeMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<DerivedTypeCollection::TestEnumExtended2, DerivedTypeCollection::TestMap>,
    std::tuple<>
    > testVoidDerivedTypeMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<DerivedTypeCollection::TestEnumExtended2, DerivedTypeCollection::TestMap>,
    std::tuple<DerivedTypeCollection::TestEnumExtended2, DerivedTypeCollection::TestMap>
    > testDerivedTypeMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<std::vector<std::shared_ptr<DerivedTypeCollection::TestPolymorphicStruct>>>,
    std::tuple<>
    > testArrayOfPolymorphicStructMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<DerivedTypeCollection::MapIntToPolymorphic>,
    std::tuple<>
    > testMapOfPolymorphicStructMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<DerivedTypeCollection::StructWithPolymorphicMember>,
    std::tuple<>
    > testStructWithPolymorphicMemberMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ExtendedInterfaceStub,
    std::tuple<DerivedTypeCollection::StructWithEnumKeyMap>,
    std::tuple<>
    > testStructWithEnumKeyMapMemberStubDispatcher;
#endif


#ifdef WIN32
static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ExtendedInterfaceStub,
    ExtendedInterfaceStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > subscribeTestSelectiveBroadcastSelectiveStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ExtendedInterfaceStub,
    ExtendedInterfaceStubAdapter,
 std::tuple<>,
    std::tuple<>
    > unsubscribeTestSelectiveBroadcastSelectiveStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ExtendedInterfaceStub,
    ExtendedInterfaceStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > subscribeTestBroadcastWithOutArgsSelectiveStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ExtendedInterfaceStub,
    ExtendedInterfaceStubAdapter,
 std::tuple<>,
    std::tuple<>
    > unsubscribeTestBroadcastWithOutArgsSelectiveStubDispatcher;
#endif

 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    ExtendedInterfaceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class ExtendedInterfaceDBusStubAdapter: public ExtendedInterfaceDBusStubAdapterInternal, public std::enable_shared_from_this<ExtendedInterfaceDBusStubAdapter> {
public:
    ExtendedInterfaceDBusStubAdapter(
                         const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                         const std::string& commonApiAddress,
                         const std::string& dbusInterfaceName,
                         const std::string& dbusBusName,
                         const std::string& dbusObjectPath,
                         const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
                         const std::shared_ptr<CommonAPI::StubBase>& stub) :
            CommonAPI::DBus::DBusStubAdapter(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            false),
            ExtendedInterfaceDBusStubAdapterInternal(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            stub) { }
};

} // namespace tests
} // namespace commonapi

#endif // COMMONAPI_TESTS_Extended_Interface_DBUS_STUB_ADAPTER_H_
