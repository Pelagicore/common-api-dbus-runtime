/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.qualifier.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_STUB_DEFAULT_H_
#define COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_STUB_DEFAULT_H_

#include <commonapi/tests/TestFreedesktopInterfaceStubDefault.h>

#include <commonapi/tests/TestFreedesktopDerivedInterfaceStub.h>
#include <sstream>

namespace commonapi {
namespace tests {

/**
 * Provides a default implementation for TestFreedesktopDerivedInterfaceStubRemoteEvent and
 * TestFreedesktopDerivedInterfaceStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class TestFreedesktopDerivedInterfaceStubDefault : public virtual TestFreedesktopDerivedInterfaceStub, public virtual TestFreedesktopInterfaceStubDefault {
public:
    TestFreedesktopDerivedInterfaceStubDefault();

    TestFreedesktopDerivedInterfaceStubRemoteEvent* initStubAdapter(const std::shared_ptr<TestFreedesktopDerivedInterfaceStubAdapter>& stubAdapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId);

    virtual const uint32_t& getTestAttributedFromDerivedInterfaceAttribute();
    virtual const uint32_t& getTestAttributedFromDerivedInterfaceAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId);
    virtual void setTestAttributedFromDerivedInterfaceAttribute(uint32_t value);
    virtual void setTestAttributedFromDerivedInterfaceAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t value);




protected:
    virtual bool trySetTestAttributedFromDerivedInterfaceAttribute(uint32_t value);
    virtual bool validateTestAttributedFromDerivedInterfaceAttributeRequestedValue(const uint32_t& value);
    virtual void onRemoteTestAttributedFromDerivedInterfaceAttributeChanged();
    class RemoteEventHandler: public virtual TestFreedesktopDerivedInterfaceStubRemoteEvent, public virtual TestFreedesktopInterfaceStubDefault::RemoteEventHandler {
     public:
        RemoteEventHandler(TestFreedesktopDerivedInterfaceStubDefault* defaultStub);

        virtual bool onRemoteSetTestAttributedFromDerivedInterfaceAttribute(uint32_t value);
        virtual bool onRemoteSetTestAttributedFromDerivedInterfaceAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t value);
        virtual void onRemoteTestAttributedFromDerivedInterfaceAttributeChanged();


     private:
        TestFreedesktopDerivedInterfaceStubDefault* defaultStub_;
    };
private:
    TestFreedesktopDerivedInterfaceStubDefault::RemoteEventHandler remoteEventHandler_;

    uint32_t testAttributedFromDerivedInterfaceAttributeValue_;

    CommonAPI::Version interfaceVersion_;
};

} // namespace tests
} // namespace commonapi

#endif // COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_STUB_DEFAULT_H_
