/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.3.qualifier.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "LegacyInterfaceDBusStubAdapter.h"
#include <fake/legacy/service/LegacyInterface.h>

namespace fake {
namespace legacy {
namespace service {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createLegacyInterfaceDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<LegacyInterfaceDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerLegacyInterfaceDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(LegacyInterface::getInterfaceId(),
                                                               &createLegacyInterfaceDBusStubAdapter);
}

LegacyInterfaceDBusStubAdapter::LegacyInterfaceDBusStubAdapter(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        LegacyInterfaceDBusStubAdapterHelper(factory, commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, 
            dbusConnection, std::dynamic_pointer_cast<LegacyInterfaceStub>(stub),
            false) {
}

LegacyInterfaceDBusStubAdapter::~LegacyInterfaceDBusStubAdapter() {
    deactivateManagedInstances();
    deinit();
    stub_.reset();
}

void LegacyInterfaceDBusStubAdapter::deactivateManagedInstances() {
}

const char* LegacyInterfaceDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    static const char* introspectionData =
        "<method name=\"TestMethod\">\n"
            "<arg name=\"input\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"val1\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"val2\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"OtherTestMethod\">\n"
            "<arg name=\"greeting\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"identifier\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"finish\">\n"
        "</method>\n"
        
    ;
    return introspectionData;
}



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    LegacyInterfaceStub,
    std::tuple<int32_t>,
    std::tuple<int32_t, int32_t>
    > testMethodStubDispatcher(&LegacyInterfaceStub::TestMethod, "ii");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    LegacyInterfaceStub,
    std::tuple<>,
    std::tuple<std::string, int32_t>
    > otherTestMethodStubDispatcher(&LegacyInterfaceStub::OtherTestMethod, "si");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    LegacyInterfaceStub,
    std::tuple<>,
    std::tuple<>
    > finishStubDispatcher(&LegacyInterfaceStub::finish, "");



const LegacyInterfaceDBusStubAdapter::StubDispatcherTable& LegacyInterfaceDBusStubAdapter::getStubDispatcherTable() {
    static const LegacyInterfaceDBusStubAdapter::StubDispatcherTable stubDispatcherTable = {
            { { "TestMethod", "i" }, &fake::legacy::service::testMethodStubDispatcher },
            { { "OtherTestMethod", "" }, &fake::legacy::service::otherTestMethodStubDispatcher },
            { { "finish", "" }, &fake::legacy::service::finishStubDispatcher }
            };
    return stubDispatcherTable;
}


} // namespace service
} // namespace legacy
} // namespace fake
