/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.qualifier.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef FAKE_LEGACY_SERVICE_Legacy_Interface_STUB_DEFAULT_H_
#define FAKE_LEGACY_SERVICE_Legacy_Interface_STUB_DEFAULT_H_


#include <fake/legacy/service/LegacyInterfaceStub.h>
#include <sstream>

namespace fake {
namespace legacy {
namespace service {

/**
 * Provides a default implementation for LegacyInterfaceStubRemoteEvent and
 * LegacyInterfaceStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class LegacyInterfaceStubDefault : public virtual LegacyInterfaceStub {
public:
    LegacyInterfaceStubDefault();

    LegacyInterfaceStubRemoteEvent* initStubAdapter(const std::shared_ptr<LegacyInterfaceStubAdapter>& stubAdapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId);


    virtual void TestMethod(const std::shared_ptr<CommonAPI::ClientId> clientId, int32_t input, int32_t& val1, int32_t& val2);
    virtual void TestMethod(int32_t input, int32_t& val1, int32_t& val2);

    virtual void OtherTestMethod(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string& greeting, int32_t& identifier);
    virtual void OtherTestMethod(std::string& greeting, int32_t& identifier);

    virtual void finish(const std::shared_ptr<CommonAPI::ClientId> clientId);
    virtual void finish();




protected:
    class RemoteEventHandler: public virtual LegacyInterfaceStubRemoteEvent {
     public:
        RemoteEventHandler(LegacyInterfaceStubDefault* defaultStub);


     private:
        LegacyInterfaceStubDefault* defaultStub_;
    };
private:
    LegacyInterfaceStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace service
} // namespace legacy
} // namespace fake

#endif // FAKE_LEGACY_SERVICE_Legacy_Interface_STUB_DEFAULT_H_
